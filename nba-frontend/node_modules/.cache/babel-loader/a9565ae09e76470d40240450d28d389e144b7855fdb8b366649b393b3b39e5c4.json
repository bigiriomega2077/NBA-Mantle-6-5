{"ast":null,"code":"var _jsxFileName = \"/Users/dzhang/Downloads/Recruiting/Coding/NBA-Mantle-6-5/nba-frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NBAGuessGame = () => {\n  _s();\n  const [targetPlayer, setTargetPlayer] = useState('');\n  const [guess, setGuess] = useState('');\n  const [guessHistory, setGuessHistory] = useState([]);\n  const [gameWon, setGameWon] = useState(false);\n  const [guessCount, setGuessCount] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [top5Players, setTop5Players] = useState([]);\n  const [showAnswer, setShowAnswer] = useState(false);\n  const [allPlayers, setAllPlayers] = useState([]);\n  const [suggestions, setSuggestions] = useState([]);\n  const [showSuggestions, setShowSuggestions] = useState(false);\n  const [selectedSuggestionIndex, setSelectedSuggestionIndex] = useState(-1);\n  const normalizeText = text => {\n    return text.normalize('NFC');\n  };\n  const modernPlayers = ['LeBron James', 'Stephen Curry', 'Kevin Durant', 'Giannis Antetokounmpo', 'Luka Dončić', 'Jayson Tatum', 'Joel Embiid', 'Nikola Jokic', 'Damian Lillard', 'Jimmy Butler', 'Kawhi Leonard', 'Anthony Davis', 'Russell Westbrook', 'James Harden', 'Chris Paul', 'Klay Thompson', 'Draymond Green', 'Paul George', 'Kyrie Irving', 'Bradley Beal', 'Devin Booker', 'Donovan Mitchell', 'Ja Morant', 'Trae Young', 'Zion Williamson', 'Pascal Siakam', 'Bam Adebayo', 'Jaylen Brown', 'Tyler Herro'];\n  const startNewGame = () => {\n    const playersToUse = allPlayers.length > 0 ? allPlayers : modernPlayers;\n    const randomPlayer = playersToUse[Math.floor(Math.random() * playersToUse.length)];\n    setTargetPlayer(randomPlayer);\n    setGuess('');\n    setGuessHistory([]);\n    setGameWon(false);\n    setGuessCount(0);\n    setError('');\n    setTop5Players([]);\n    setShowAnswer(false);\n    setSuggestions([]);\n    setShowSuggestions(false);\n    setSelectedSuggestionIndex(-1);\n  };\n  useEffect(() => {\n    const loadPlayerNames = async () => {\n      try {\n        const response = await fetch('/players_cleaned.json');\n        const data = await response.json();\n        const playerNames = Object.keys(data).map(normalizeText).sort();\n        setAllPlayers(playerNames);\n        const randomPlayer = playerNames[Math.floor(Math.random() * playerNames.length)];\n        setTargetPlayer(randomPlayer);\n      } catch (error) {\n        console.error('Could not load players_cleaned.json', error);\n        const fallback = modernPlayers.map(normalizeText);\n        setAllPlayers(fallback);\n        const randomPlayer = fallback[Math.floor(Math.random() * fallback.length)];\n        setTargetPlayer(randomPlayer);\n      }\n      setGuess('');\n      setGuessHistory([]);\n      setGameWon(false);\n      setGuessCount(0);\n      setError('');\n      setTop5Players([]);\n      setShowAnswer(false);\n      setSuggestions([]);\n      setShowSuggestions(false);\n      setSelectedSuggestionIndex(-1);\n    };\n    loadPlayerNames();\n  }, []);\n  const makeGuess = async () => {\n    if (!guess.trim()) return;\n    const normalizedGuess = normalizeText(guess.trim());\n    setShowSuggestions(false);\n    setSuggestions([]);\n    setSelectedSuggestionIndex(-1);\n    setLoading(true);\n    setError('');\n    try {\n      const response = await fetch('http://127.0.0.1:5000/guess', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          guess: normalizedGuess,\n          target: normalizeText(targetPlayer)\n        })\n      });\n      if (response.ok) {\n        const result = await response.json();\n        const {\n          score,\n          matched_name,\n          breakdown,\n          top_5\n        } = result;\n        const newGuess = {\n          name: matched_name ? normalizeText(matched_name) : normalizedGuess,\n          score: score,\n          breakdown: breakdown || {}\n        };\n        const alreadyGuessed = guessHistory.some(g => g.name === newGuess.name);\n        if (!alreadyGuessed) {\n          setGuessHistory(prev => {\n            const updated = [...prev, newGuess];\n            return updated.sort((a, b) => b.score - a.score).slice(0, 15);\n          });\n          setGuessCount(prev => prev + 1);\n          if (score === 100) {\n            setGameWon(true);\n            setTop5Players(top_5 || []);\n          }\n        } else {\n          setError('You have already guessed this player!');\n        }\n        setGuess('');\n      } else {\n        const errorData = await response.json();\n        setError(errorData.error || 'Unknown error occurred');\n      }\n    } catch (err) {\n      setError('Connection error. Make sure the Flask server is running on port 5000');\n    }\n    setLoading(false);\n  };\n\n  // ... (The rest of the UI code stays unchanged)\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 5\n  }, this);\n};\n_s(NBAGuessGame, \"YKsgZJsf+WJw3T18O/dFyhvuK6w=\");\n_c = NBAGuessGame;\nexport default NBAGuessGame;\nvar _c;\n$RefreshReg$(_c, \"NBAGuessGame\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","NBAGuessGame","_s","targetPlayer","setTargetPlayer","guess","setGuess","guessHistory","setGuessHistory","gameWon","setGameWon","guessCount","setGuessCount","loading","setLoading","error","setError","top5Players","setTop5Players","showAnswer","setShowAnswer","allPlayers","setAllPlayers","suggestions","setSuggestions","showSuggestions","setShowSuggestions","selectedSuggestionIndex","setSelectedSuggestionIndex","normalizeText","text","normalize","modernPlayers","startNewGame","playersToUse","length","randomPlayer","Math","floor","random","loadPlayerNames","response","fetch","data","json","playerNames","Object","keys","map","sort","console","fallback","makeGuess","trim","normalizedGuess","method","headers","body","JSON","stringify","target","ok","result","score","matched_name","breakdown","top_5","newGuess","name","alreadyGuessed","some","g","prev","updated","a","b","slice","errorData","err","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/dzhang/Downloads/Recruiting/Coding/NBA-Mantle-6-5/nba-frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst NBAGuessGame = () => {\n  const [targetPlayer, setTargetPlayer] = useState('');\n  const [guess, setGuess] = useState('');\n  const [guessHistory, setGuessHistory] = useState([]);\n  const [gameWon, setGameWon] = useState(false);\n  const [guessCount, setGuessCount] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [top5Players, setTop5Players] = useState([]);\n  const [showAnswer, setShowAnswer] = useState(false);\n  const [allPlayers, setAllPlayers] = useState([]);\n  const [suggestions, setSuggestions] = useState([]);\n  const [showSuggestions, setShowSuggestions] = useState(false);\n  const [selectedSuggestionIndex, setSelectedSuggestionIndex] = useState(-1);\n\n  const normalizeText = (text) => {\n    return text.normalize('NFC');\n  };\n\n  const modernPlayers = [\n    'LeBron James', 'Stephen Curry', 'Kevin Durant', 'Giannis Antetokounmpo',\n    'Luka Dončić', 'Jayson Tatum', 'Joel Embiid', 'Nikola Jokic', 'Damian Lillard',\n    'Jimmy Butler', 'Kawhi Leonard', 'Anthony Davis', 'Russell Westbrook',\n    'James Harden', 'Chris Paul', 'Klay Thompson', 'Draymond Green',\n    'Paul George', 'Kyrie Irving', 'Bradley Beal', 'Devin Booker',\n    'Donovan Mitchell', 'Ja Morant', 'Trae Young', 'Zion Williamson',\n    'Pascal Siakam', 'Bam Adebayo', 'Jaylen Brown', 'Tyler Herro'\n  ];\n\n  const startNewGame = () => {\n    const playersToUse = allPlayers.length > 0 ? allPlayers : modernPlayers;\n    const randomPlayer = playersToUse[Math.floor(Math.random() * playersToUse.length)];\n\n    setTargetPlayer(randomPlayer);\n    setGuess('');\n    setGuessHistory([]);\n    setGameWon(false);\n    setGuessCount(0);\n    setError('');\n    setTop5Players([]);\n    setShowAnswer(false);\n    setSuggestions([]);\n    setShowSuggestions(false);\n    setSelectedSuggestionIndex(-1);\n  };\n\n  useEffect(() => {\n    const loadPlayerNames = async () => {\n      try {\n        const response = await fetch('/players_cleaned.json');\n        const data = await response.json();\n        const playerNames = Object.keys(data).map(normalizeText).sort();\n        setAllPlayers(playerNames);\n\n        const randomPlayer = playerNames[Math.floor(Math.random() * playerNames.length)];\n        setTargetPlayer(randomPlayer);\n      } catch (error) {\n        console.error('Could not load players_cleaned.json', error);\n        const fallback = modernPlayers.map(normalizeText);\n        setAllPlayers(fallback);\n\n        const randomPlayer = fallback[Math.floor(Math.random() * fallback.length)];\n        setTargetPlayer(randomPlayer);\n      }\n\n      setGuess('');\n      setGuessHistory([]);\n      setGameWon(false);\n      setGuessCount(0);\n      setError('');\n      setTop5Players([]);\n      setShowAnswer(false);\n      setSuggestions([]);\n      setShowSuggestions(false);\n      setSelectedSuggestionIndex(-1);\n    };\n\n    loadPlayerNames();\n  }, []);\n\n  const makeGuess = async () => {\n    if (!guess.trim()) return;\n\n    const normalizedGuess = normalizeText(guess.trim());\n\n    setShowSuggestions(false);\n    setSuggestions([]);\n    setSelectedSuggestionIndex(-1);\n\n    setLoading(true);\n    setError('');\n\n    try {\n      const response = await fetch('http://127.0.0.1:5000/guess', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          guess: normalizedGuess,\n          target: normalizeText(targetPlayer)\n        })\n      });\n\n      if (response.ok) {\n        const result = await response.json();\n        const { score, matched_name, breakdown, top_5 } = result;\n\n        const newGuess = {\n          name: matched_name ? normalizeText(matched_name) : normalizedGuess,\n          score: score,\n          breakdown: breakdown || {}\n        };\n\n        const alreadyGuessed = guessHistory.some(g => g.name === newGuess.name);\n\n        if (!alreadyGuessed) {\n          setGuessHistory(prev => {\n            const updated = [...prev, newGuess];\n            return updated.sort((a, b) => b.score - a.score).slice(0, 15);\n          });\n\n          setGuessCount(prev => prev + 1);\n\n          if (score === 100) {\n            setGameWon(true);\n            setTop5Players(top_5 || []);\n          }\n        } else {\n          setError('You have already guessed this player!');\n        }\n\n        setGuess('');\n      } else {\n        const errorData = await response.json();\n        setError(errorData.error || 'Unknown error occurred');\n      }\n    } catch (err) {\n      setError('Connection error. Make sure the Flask server is running on port 5000');\n    }\n\n    setLoading(false);\n  };\n\n  // ... (The rest of the UI code stays unchanged)\n\n  return (\n    <div>\n      {/* Your existing UI here, unchanged */}\n    </div>\n  );\n};\n\nexport default NBAGuessGame;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}